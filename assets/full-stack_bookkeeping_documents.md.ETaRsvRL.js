import{_ as l}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as a,v as i,z as e}from"./chunks/vue.6z6dcVl3.js";const m=JSON.parse('{"title":"撰写开发文档","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/bookkeeping/documents.md","filePath":"full-stack/bookkeeping/documents.md","lastUpdated":1693570275000}'),t={name:"full-stack/bookkeeping/documents.md"},o=e('<h1 id="撰写开发文档" tabindex="-1">撰写开发文档 <a class="header-anchor" href="#撰写开发文档" aria-label="Permalink to &quot;撰写开发文档&quot;">​</a></h1><h2 id="需求文档" tabindex="-1">需求文档 <a class="header-anchor" href="#需求文档" aria-label="Permalink to &quot;需求文档&quot;">​</a></h2><ul><li>用文字概括所有功能，并描述每一个功能。</li><li>我建议个人项目用「用例图」代替。</li></ul><h3 id="系统概要设计" tabindex="-1">系统概要设计 <a class="header-anchor" href="#系统概要设计" aria-label="Permalink to &quot;系统概要设计&quot;">​</a></h3><ul><li>描述出实现需求所需要的软件架构。</li><li>我理解主要就是划分功能模块，方便分工。</li><li>有哪些模块、模块间如何交互。</li><li>有哪些数据、数据之间有什么关系。</li><li>技术风险在哪。</li></ul><h3 id="系统详细设计" tabindex="-1">系统详细设计 <a class="header-anchor" href="#系统详细设计" aria-label="Permalink to &quot;系统详细设计&quot;">​</a></h3><ul><li>需要架构师给出数据库设计、流程图、类图、时序图等，方便码农实现。</li><li>但国内一般让码农自己想、自己写。</li></ul><h3 id="测试文档" tabindex="-1">测试文档 <a class="header-anchor" href="#测试文档" aria-label="Permalink to &quot;测试文档&quot;">​</a></h3><ul><li>测试用例 = 输入 + 输出 + 环境，测试文档描述了所有测试用例。</li><li>根据范围分为单元测试、集成测试、系统测试、冒烟测试、回归测试等。</li></ul><h3 id="接口文档" tabindex="-1">接口文档 <a class="header-anchor" href="#接口文档" aria-label="Permalink to &quot;接口文档&quot;">​</a></h3><ul><li>接口文档由程序员撰写，方便不同模块间互相调用。</li><li>目前流行的撰写工具有 Swagger、Postman、Apifox、Apipost。</li></ul><h3 id="总结-需求文档的内容" tabindex="-1">总结 需求文档的内容 <a class="header-anchor" href="#总结-需求文档的内容" aria-label="Permalink to &quot;总结 需求文档的内容&quot;">​</a></h3><p>项目背景</p><ul><li>要解决什么问题。</li></ul><p>用户定位</p><ul><li>希望服务什么样的用户。</li></ul><p>需求划分</p><ul><li>为了达成大需求，要解决哪些小需求。</li></ul><p>功能列表</p><ul><li>描述每个功能的使用流程，可用文字、图片、流程图、用例图等。</li></ul><p>范围</p><ul><li>哪些功能是 Version 1 做。</li><li>哪些功能是 Version 2 做。</li><li>哪些是必做，哪些是选做。</li></ul><p>可行性</p><ul><li>从经济、技术、法律等方面。</li><li>证明此需求不是不可能达成的。</li></ul><h2 id="常见-web-应用架构" tabindex="-1">常见 Web 应用架构 <a class="header-anchor" href="#常见-web-应用架构" aria-label="Permalink to &quot;常见 Web 应用架构&quot;">​</a></h2><p>三层架构（Three Tier Architecture）</p><ul><li>数据层、应用层、表现层。</li></ul><p>MVC 模式</p><ul><li>Model、Controller、View。</li></ul><p>微服务、Serverless</p><ul><li>先不作了解，跳过。</li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>前后端分离</p><ul><li>前后端代码完全分开，靠 HTTP API 交流。</li></ul><p>负载均衡</p><ul><li>用多台机器提供同一个服务，分担压力。</li></ul><p>中间件</p><ul><li>放在处理流程中间，提供单独的、可组合的服务。</li></ul>',38),r=[o];function u(n,h,s,d,c,p){return i(),a("div",null,r)}const f=l(t,[["render",u]]);export{m as __pageData,f as default};
