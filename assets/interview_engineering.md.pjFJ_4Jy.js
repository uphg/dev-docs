import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as i,v as a,z as l}from"./chunks/vue.6z6dcVl3.js";const y=JSON.parse('{"title":"工程化押题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/engineering.md","filePath":"interview/engineering.md","lastUpdated":1695738516000}'),e={name:"interview/engineering.md"},n=l(`<h1 id="工程化押题" tabindex="-1">工程化押题 <a class="header-anchor" href="#工程化押题" aria-label="Permalink to &quot;工程化押题&quot;">​</a></h1><p>常见 loader 和 plugin 有哪些？二者的区别是什么</p><h2 id="webpack-常见的-loader-有哪些" tabindex="-1">webpack 常见的 loader 有哪些？ <a class="header-anchor" href="#webpack-常见的-loader-有哪些" aria-label="Permalink to &quot;webpack 常见的 loader 有哪些？&quot;">​</a></h2><p>webpack官方文档：<a href="https://webpack.js.org/loaders/" target="_blank" rel="noreferrer">Loaders | webpack</a></p><p>可以记住以下几个重点的：</p><ol><li><code>babel-loader</code> 把 JS/TS 变成 JS</li><li><code>ts-loader</code> 把 TS 变成 JS，<strong>并提示类型错误</strong></li><li><code>markdown-loader</code> 把 markdown 变成 html</li><li><code>html-loader</code> 把 html 变成 JS 字符串</li><li><code>sass-loader</code> 把 Sass/Scss 变成 CSS</li><li><code>css-loader</code> 把 CSS 变成 JS 字符串</li><li><code>style-loader</code> 把 JS 字符串变成 style 标签</li><li><code>postcss-loader</code> 把 CSS 变成更优化的 CSS</li><li><code>vue-loader</code> 把单文件（SFC）变成 JS 模块</li><li><code>thread-loader</code> 用于多进程打包</li></ol><h2 id="webpack-常见的-plugin" tabindex="-1">webpack 常见的 plugin <a class="header-anchor" href="#webpack-常见的-plugin" aria-label="Permalink to &quot;webpack 常见的 plugin&quot;">​</a></h2><p>也在 webpack 文档中写了：<a href="https://webpack.js.org/plugins/" target="_blank" rel="noreferrer">Plugins | webpack</a></p><p>可以记住以下几个重点的：</p><ol><li><code>html-webpack-plugin</code> 用于创建 HTML 页面并自动引入 JS 和 CSS</li><li><code>clean-webpack-plugin</code> 用于清理之前打包的残余文件</li><li><code>mini-css-extract-plugin</code> 用于将 JS 中的 CSS 抽离成单独的 CSS 文件</li><li><code>SplitChunksPlugin</code> 用于代码分包（Code Split）</li><li><code>DllPlugin</code> + <code>DllReferencePlugin</code> 用于避免大依赖被频繁重新打包，大幅降低打包时间，详见：<a href="https://segmentfault.com/a/1190000016567986" target="_blank" rel="noreferrer">javascript - webpack使用-详解DllPlugin - 前端路漫漫 - SegmentFault 思否</a></li><li><code>eslint-webpack-plugin</code> 用于检查代码中的错误</li><li><code>DefinePlugin</code> 用于在 webpack config 里添加全局变量</li><li><code>copy-webpack-plugin</code> 用于拷贝静态文件到 dist</li></ol><h2 id="webpack-中-loader-和-plugin-的区别" tabindex="-1">webpack 中 loader 和 plugin 的区别 <a class="header-anchor" href="#webpack-中-loader-和-plugin-的区别" aria-label="Permalink to &quot;webpack 中 loader 和 plugin 的区别&quot;">​</a></h2><ul><li>loader 是文件加载器（这句废话很重要） <ul><li>功能：能够对文件进行编译、优化、混淆（压缩）等，比如 babel-loader / vue-loader</li><li>运行时机：在创建最终产物之前运行</li></ul></li><li>plugin 是 webpack 插件（这句废话也很重要） <ul><li>功能：能实现更多功能，比如定义全局变量、Code Split、加速编译等</li><li>运行实际：在整个打包过程中（以及打包前后）都能运行</li></ul></li></ul><h2 id="webpack-如何解决开发时的跨域问题" tabindex="-1">webpack 如何解决开发时的跨域问题？ <a class="header-anchor" href="#webpack-如何解决开发时的跨域问题" aria-label="Permalink to &quot;webpack 如何解决开发时的跨域问题？&quot;">​</a></h2><p>在开发时，我们的页面在 <code>localhost:8080</code> ，JS 直接访问后端接口（如：<code>https://xiedaimala.com</code> 或 <code>http://localhost:8080/</code>）会报跨域错误。</p><p>为了解决这个问题，可以在 webpack.config.js 中添加如下配置</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;http://xiedaimala.com&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时，在 JS 中请求 <code>/api/users</code> 就会自动被代理到 <code>http://xiedaimala.com/api/users</code></p><p>如果希望请求中的 Origin 从 8080 修改为 <code>xiedaimala.com</code>，可以添加 <code>chageOrigin: true</code></p><p>如果要访问的是 HTTPS API，那么就需要配置 HTTPS 证书，否则会报错。</p><p>不过，如果在 target 下面添加 <code>secure: false</code> ，就可以不配置证书且忽略 HTTPS 报错。</p><p>总之，记住常用选项就行了。</p><h2 id="如何实现-tree-shaking" tabindex="-1">如何实现 tree-shaking？ <a class="header-anchor" href="#如何实现-tree-shaking" aria-label="Permalink to &quot;如何实现 tree-shaking？&quot;">​</a></h2><p>这题属于拿着文档问面试者，欺负那些背不下文档的人。</p><p><a href="https://webpack.js.org/guides/tree-shaking/#conclusion" target="_blank" rel="noreferrer">Tree Shaking | webpack</a></p><p><a href="https://webpack.docschina.org/guides/tree-shaking/#conclusion" target="_blank" rel="noreferrer">Tree Shaking | webpack 中文文档</a></p><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h3><p>tree-shaking 就是让没有用大的 JS 代码不打包，以减小体积。</p><h3 id="怎么做" tabindex="-1">怎么做 <a class="header-anchor" href="#怎么做" aria-label="Permalink to &quot;怎么做&quot;">​</a></h3><p>背下文档说的这几点</p><ol><li><p>怎么删除无用代码</p><ol><li><p>使用 ES Modules 语法（即 ES6+ 的 import 和 export 关键字）</p></li><li><p>CommonJS 语法无法 tree-shaking（即 require 和 exports 语法）</p></li><li><p>引入的时候只引入需要的模块</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { cloneDeep } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash-es&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 方便 tree-shaking</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 会导致无法 tree-shaking</span></span></code></pre></div></li></ol></li><li><p>怎么防止文件被删除</p><ol><li>在 package.json 中配置 sideEffects，防止某些文件内容被删掉</li><li>比如 import 了 x.js，而 x.js 只是添加了一个 window.x 的全局属性，那么 x.js 就要放到 sideEffects 里</li><li>比如所有被 import 的 CSS 文件，都要放到 sideEffects 里</li></ol></li><li><p>怎么开启：在 webpack config 中将 mode 设置为 production（开发环境没必要 tree-shaking）</p><ol><li><code>mode: production</code> 给 webpack 加了非常多<a href="https://github.com/webpack/webpack/blob/f43047c4c2aa4b0a315328e4c34a319dc2662254/lib/config/defaults.js#L1125" target="_blank" rel="noreferrer">优化</a></li></ol></li></ol><h2 id="如何提高-webpack-构建速度" tabindex="-1">如何提高 webpack 构建速度？ <a class="header-anchor" href="#如何提高-webpack-构建速度" aria-label="Permalink to &quot;如何提高 webpack 构建速度？&quot;">​</a></h2><p>在 webpack 中</p><p><a href="https://webpack.docschina.org/guides/build-performance/" target="_blank" rel="noreferrer">构建性能 | webpack 中文文档</a></p><ol><li>使用 DllPlugin 将不常变化的代码提前打包，并复用，如 vue、react</li><li>使用 thread-loader 或 HappyPack（过时）进行多线程打包</li><li>处于开发环境时，在 webpack config 中将 cache 设为 true，也可用 cacheloader（过时）</li><li>处于生产环境时，关闭不必要的环节，比如可以关闭 source map</li><li>网传的 HardSourceWebpackPlugin 已经一年多没更新了，谨慎使用</li></ol><h2 id="webpack-与-vite-的区别是什么" tabindex="-1">webpack 与 vite 的区别是什么？ <a class="header-anchor" href="#webpack-与-vite-的区别是什么" aria-label="Permalink to &quot;webpack 与 vite 的区别是什么？&quot;">​</a></h2><h3 id="开发环境区别" tabindex="-1">开发环境区别 <a class="header-anchor" href="#开发环境区别" aria-label="Permalink to &quot;开发环境区别&quot;">​</a></h3><ol><li><p>vite 自己实现 server，不对代码打包，充分利用浏览器对</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;script type=model&gt;</span></span></code></pre></div><p>的支持</p><ol><li>假设 main.js 引入了 vue</li><li>该 server 会把 <code>import { createApp } from &#39;vue&#39;</code> 改为 <code>import { createApp } from &quot;/node_modules/.vite/vue.js&quot;</code> 这样浏览器就知道去哪里找 vue.js</li></ol></li><li><p>webpack-dev-server 常使用 babel-loader 基于内存打包，比 vite 慢很多</p><ol><li>该 server 会把 vue.js 的代码递归的打包进 main.js</li></ol></li></ol><h3 id="生产环境的区别" tabindex="-1">生产环境的区别 <a class="header-anchor" href="#生产环境的区别" aria-label="Permalink to &quot;生产环境的区别&quot;">​</a></h3><ol><li>vite 使用 rollup + esbuild 来打包 JS 代码</li><li>webpack 使用 babel 来打包 JS 代码，比 esbuild 慢很多</li><li>webpack 也可以使用 esbuild，但需要自己配置，很麻烦</li></ol><h3 id="文件处理时机" tabindex="-1">文件处理时机 <a class="header-anchor" href="#文件处理时机" aria-label="Permalink to &quot;文件处理时机&quot;">​</a></h3><ol><li>vite 只会在 你请求某个文件的时候再去处理该文件</li><li>webpack 会提前打包好 main.js，等你请求的时候直接输出打包好的 JS 给你</li></ol><h3 id="目前-vite-已知的缺点" tabindex="-1">目前 vite 已知的缺点 <a class="header-anchor" href="#目前-vite-已知的缺点" aria-label="Permalink to &quot;目前 vite 已知的缺点&quot;">​</a></h3><ol><li>热跟新经常失效，原因不详</li><li>有些功能 rollup 不支持，需要自己写 rollup 插件</li><li>不支持非现代浏览器</li></ol><h2 id="webpack-怎么配置多页应用" tabindex="-1">webpack 怎么配置多页应用？ <a class="header-anchor" href="#webpack-怎么配置多页应用" aria-label="Permalink to &quot;webpack 怎么配置多页应用？&quot;">​</a></h2><p>配置多页面的 webpack config</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    admin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/admin.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但是，这样配置会有一个「重复打包」的问题：假设 app.js 和 admin.js 都引入了 vue.js，那么 vue.js 的代码既会打包进 app.js，也会打包进 admin.js。我们需要使用 <code>optimization.splitChunks</code> 将共同依赖单独打包成 common.js（HtmlWebpackPlugin 会自动引入 common.js）</p><h3 id="如何支持无限多页面呢" tabindex="-1">如何支持无限多页面呢 <a class="header-anchor" href="#如何支持无限多页面呢" aria-label="Permalink to &quot;如何支持无限多页面呢&quot;">​</a></h3><p>写一个 Node.js 代码就实现了</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filenames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readdirSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/pages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filenames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [name]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`./src/pages/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.js\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filenames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunks: [name]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="swc、esbuild-是什么" tabindex="-1">swc、esbuild 是什么？ <a class="header-anchor" href="#swc、esbuild-是什么" aria-label="Permalink to &quot;swc、esbuild 是什么？&quot;">​</a></h2><h3 id="swc" tabindex="-1">swc <a class="header-anchor" href="#swc" aria-label="Permalink to &quot;swc&quot;">​</a></h3><p>实现语言：Rust</p><p>功能：编译 JS/TS、打包 JS</p><p>优势：比 babel 快很多很多很多（20倍以上）</p><p>可以集成到 webpack</p><p>缺点：</p><ul><li>无法对 TS 代码进行类型检查（用 tsc 可以）</li><li>无法打包 CSS、SVG</li></ul><h3 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h3><p>实现语言：Go</p><p>功能：同上</p><p>优势：比 babel 快更多更多（10~100倍）</p><p>使用者：vite、vuepress、snowpack、umijs、blitz.js 等</p><p>缺点：</p><ul><li>无法对 TS 代码进行类型检查</li><li>无法打包 CSS、SVG</li></ul>`,65),p=[n];function h(t,k,r,d,E,c){return a(),i("div",null,p)}const u=s(e,[["render",h]]);export{y as __pageData,u as default};
