import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as i,v as a,z as n}from"./chunks/vue.6z6dcVl3.js";const y=JSON.parse('{"title":"部署上线","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/bookkeeping/deployment-online.md","filePath":"full-stack/bookkeeping/deployment-online.md","lastUpdated":1692101676000}'),l={name:"full-stack/bookkeeping/deployment-online.md"},e=n(`<h1 id="部署上线" tabindex="-1">部署上线 <a class="header-anchor" href="#部署上线" aria-label="Permalink to &quot;部署上线&quot;">​</a></h1><h2 id="购买服务器" tabindex="-1">购买服务器 <a class="header-anchor" href="#购买服务器" aria-label="Permalink to &quot;购买服务器&quot;">​</a></h2><p>首先要购买云服务器。</p><ul><li>阿里云目前市场份额最高，服务响应及时，但价格不美。</li><li>腾讯云目前市场份额较低，但优惠力度大。</li><li>通常新用户较便宜，所以最好买一年到三年。</li></ul><h2 id="配置服务器" tabindex="-1">配置服务器 <a class="header-anchor" href="#配置服务器" aria-label="Permalink to &quot;配置服务器&quot;">​</a></h2><p><strong>用户登录</strong></p><ul><li>购买服务器后，需要使用 ssh 登录。</li><li>不推荐使用「用户名 + 密码」登录，容易忘，且不安全。</li><li>推荐使用 ssh-copy-id 上传公钥，使用 ssh 登录。具体搜索创建密钥对。如下</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首次运行以下命令登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-copy-id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@123.123.123.20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 之后使用 ssh 登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@123.123.123.20</span></span></code></pre></div><p><strong>关于防火墙</strong></p><ul><li>配置好远程服务器后，需要开启端口测试。</li><li>推荐开启测试端口，如 3000、3001、5000、8000、8080。</li><li>自行选择是否开启重要端口，因为需要备案，如 80、443。</li></ul><h3 id="ssh-自动断开解决方法" tabindex="-1">ssh 自动断开解决方法 <a class="header-anchor" href="#ssh-自动断开解决方法" aria-label="Permalink to &quot;ssh 自动断开解决方法&quot;">​</a></h3><p>ssh 终端会在登录后没有任何操作时自动端口。</p><p>解决方法：登录云主机，对 ssh 配置文件进行编辑，输入以下命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/ssh/sshd_config</span></span></code></pre></div><p>找到 ClientAliveInterval，这个参数是 SSH 连接维持的时间，数值是秒，可以自行设置。</p><p>例如：</p><ul><li><strong>ClientAliveInterval 300</strong>：表示 300 秒，即 5 分钟超时。</li><li><strong>ClientAliveCountMax 5</strong>，表示允许超时5次。</li></ul><p>修改后 <code>:wq</code> 保存并退出，然后运行重启 ssh 命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd restart # 重启</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd stop # 停止</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd start # 启动</span></span></code></pre></div><p>以上配置完成后，使用 root 用户登录远程主机，注册当前项目账户，一般名称为</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adduser</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mangosteen</span></span></code></pre></div><p>创建一个名称为 mangosteen 的用户（创建时除了密码都可以直接回车跳过）。并且会创建一个 mangosteen 用户组，将 mangosteen 用户放入 mangosteen 用户组。</p><h3 id="安装-docker" tabindex="-1">安装 docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 docker&quot;">​</a></h3><ul><li>参考教程：<a href="https://docs.docker.com/engine/install/ubuntu/#installation-methods" target="_blank" rel="noreferrer">Install Docker Engine on Ubuntu</a></li><li>注意安装时，root 用户不需要 sudo 命令，安装 Install Docker Engine 后完成。</li></ul><h3 id="配置用户权限" tabindex="-1">配置用户权限 <a class="header-anchor" href="#配置用户权限" aria-label="Permalink to &quot;配置用户权限&quot;">​</a></h3><ul><li>推荐只在 root 用户里安装 Docker 即可</li><li>每个应用创建一个独立用户，并加入 docker 用户组。切忌用 root 管理所有应用</li></ul><p>在 docker 用户组中添加 mangosteen 用户，这样用户才能使用 docker，如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker mangosteen</span></span></code></pre></div><ul><li>可以通过查看 <code>/etc/shadow</code> 文件来查看系统中存在的所有用户。</li><li>可以通过查看 <code>/etc/group</code> 文件来查看系统中存在的所有用户组。</li></ul><p>然后退出 ssh 登录（运行 exit 回车，或者 Ctrl + D）</p><p><strong>配置用户登录公钥</strong></p><p>使用 mangosteen 用户登录时，需要重新配置 ssh 权限，依次运行以下命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用 root 用户重新登录 ssh，将 root 用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh root@123.123.123.20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 .ssh 目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir /home/mangosteen/.ssh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 ssh 配置文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd ~/.ssh/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 root 用户的配置拷贝至 mangosteen 用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp ./authorized_keys /home/mangosteen/.ssh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将文件权限转交给 mangosteen 用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd /home/mangosteen</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -R 表示递归遍历当前目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown -R mangosteen:mangosteen .ssh</span></span></code></pre></div><h2 id="配置后端生产环境" tabindex="-1">配置后端生产环境 <a class="header-anchor" href="#配置后端生产环境" aria-label="Permalink to &quot;配置后端生产环境&quot;">​</a></h2><p>首先在首页添加一个返回内容，打开 <code>config/routes.rb</code> 添加</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.routes.draw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;home#index&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>运行 <code>bin/rails g controller home index</code> 生成对应方法，并添加以下返回内容</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HomeController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">json:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">message:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="创建打包脚本" tabindex="-1">创建打包脚本 <a class="header-anchor" href="#创建打包脚本" aria-label="Permalink to &quot;创建打包脚本&quot;">​</a></h3><p>创建 <code>bin/pack_for_host.sh</code> 文件（用于打包当前项目至生产环境），添加以下内容</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意修改 oh-my-env 目录名为你的目录名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oh-my-env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +&#39;%Y%m%d-%H%M%S&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tmp/mangosteen-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">current_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deploy_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/workspaces/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mangosteen_deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tmp/mangosteen-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.tar.gz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $deploy_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mangosteen-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.tar.gz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --exclude=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tmp/cache/*&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -czv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $dist </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $deploy_dir</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $current_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/../config/host.Dockerfile </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$deploy_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $current_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/setup_host.sh </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$deploy_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $dist $deploy_dir</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $deploy_dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/version</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;DONE!&#39;</span></span></code></pre></div><p>其中</p><ul><li>time 表示当前时间</li><li>dist 在 tmp 目录中将当前项目打包为 mangosteen-$time.tar.gz 文件</li><li>两个 <code>yes | rm ...</code> 表示删除之前的文件</li><li><code>tar --exclude=&quot;tmp/cache/*&quot; -czv -f $dist *</code> tmp/cache 不打包。</li><li>其他不以 . 开头的文件打包至 dist，* 表示所有不以 . 开头的文件。</li></ul><h3 id="创建-host-dockerfile" tabindex="-1">创建 host.Dockerfile <a class="header-anchor" href="#创建-host-dockerfile" aria-label="Permalink to &quot;创建 host.Dockerfile&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby:3.0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RAILS_ENV production</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir /mangosteen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle config mirror.https://rubygems.org https://gems.ruby-china.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mangosteen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ADD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mangosteen-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.tar.gz ./</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle config set --local without &#39;development test&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENTRYPOINT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bundle exec puma</span></span></code></pre></div><p>上面的内容表示</p><ul><li><code>FROM ruby:3.0.0</code> 表示 ruby v3.0.0 镜像环境（通过搜索 docker ruby 查找对应版本镜像）。</li><li><code>ENV RAILS_ENV production</code> 设置当前环境为生产环境</li><li><code>WORKDIR /mangosteen</code> 配置工作目录</li><li><code>ADD mangosteen-*.tar.gz ./</code> 表示拷贝的项目压缩包，并且解压至当前目录（ADD 会自动解压缩 .tar 包）</li><li><code>RUN bundle config set --local without &#39;development test&#39;</code> 配置不要安装开发和测试环境</li><li><code>RUN bundle install</code> 安装当前环境包</li><li><code>ENTRYPOINT bundle exec puma</code> 可运行“光盘”，<code>ENTRYPOINT</code> 表示当你运行 docker run 时运行这句话。</li></ul><h3 id="添加-docker-运行脚本" tabindex="-1">添加 docker 运行脚本 <a class="header-anchor" href="#添加-docker-运行脚本" aria-label="Permalink to &quot;添加 docker 运行脚本&quot;">​</a></h3><p>创建 <code>bin/setup_host.sh</code> 文件，添加以下内容</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mangosteen-prod-1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mangosteen_deploy/version)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;docker build ...&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build mangosteen_deploy -t mangosteen:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$version</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps -aq -f name=^mangosteen-prod-1$)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;docker rm ...&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm -f </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$container_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;docker run ...&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -e DB_HOST=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$DB_HOST </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RAILS_MASTER_KEY=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$RAILS_MASTER_KEY </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3000 --network=network1 -e DB_PASSWORD=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$DB_PASSWORD </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--name=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mangosteen:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$version</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;DONE!&#39;</span></span></code></pre></div><p>上面变量的含义为</p><ul><li><code>DB_PASSWORD=123456</code> 数据库密码</li><li><code>container_name=mangosteen-prod-1</code> 容器名称</li><li><code>version</code> 版本</li><li><code>DB_HOST</code> 代表数据库名称，<code>DB_PASSWORD</code> 代表数据库密码，<code>RAILS_MASTER_KEY</code> 代表 <code>config/credentials/production.key</code></li></ul><p>然后运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改 bash 文件执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod +x bin/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行项目打包脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/pack_for_host.sh</span></span></code></pre></div><h3 id="总结主要流程" tabindex="-1">总结主要流程 <a class="header-anchor" href="#总结主要流程" aria-label="Permalink to &quot;总结主要流程&quot;">​</a></h3><ul><li>准备一个新用户</li><li>准备好 Docker</li><li>上传 Dockerfile</li><li>上传源代码</li><li>用 Dockerfile 构建运行环境</li><li>在运行环境里运行源代码</li><li>使用 Nginx 做转发</li></ul><h3 id="如何更新版本" tabindex="-1">如何更新版本？ <a class="header-anchor" href="#如何更新版本" aria-label="Permalink to &quot;如何更新版本？&quot;">​</a></h3><ul><li>上传新 Dockerfile</li><li>上传新源代码</li><li>用 Dockerfile 构建新运行环境</li><li>在新环境运行新代码</li><li>使用 Nginx 做转发</li></ul>`,58),h=[e];function t(p,k,d,r,o,c){return a(),i("div",null,h)}const E=s(l,[["render",t]]);export{y as __pageData,E as default};
