import{_ as t}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{v as e,x as s,z as a,l as i,F as d}from"./chunks/vue.6z6dcVl3.js";const o="/dev-docs/assets/nodejs-eventloop-process.bzmwd8oJ.jpg",p="/dev-docs/assets/nodejs-process.PGMRCgFd.jpg",c={},r={class:"flexible-container"},h=a('<ul class="flexible-table" data-v-ccf92d3d><li data-v-ccf92d3d><p class="flexible-table__title" data-v-ccf92d3d><b data-v-ccf92d3d>Node.js API</b></p><p data-v-ccf92d3d>http 模块、fs 模块、stream 模块</p></li></ul><ul class="flexible-table" data-v-ccf92d3d><li data-v-ccf92d3d><p class="flexible-table__title" data-v-ccf92d3d><b data-v-ccf92d3d>Node.js bindings</b></p><p data-v-ccf92d3d>让 JS 和 C/C++ 通信</p></li><li data-v-ccf92d3d><p class="flexible-table__title" data-v-ccf92d3d><b data-v-ccf92d3d>C/C++ 插件</b></p><p data-v-ccf92d3d>自定义其他能力</p></li></ul><ul class="flexible-table" data-v-ccf92d3d><li data-v-ccf92d3d><p data-v-ccf92d3d>JS 引擎</p><p data-v-ccf92d3d>V8</p></li><li data-v-ccf92d3d><p data-v-ccf92d3d>跨平台异步I/O能力</p><p data-v-ccf92d3d>libuv</p></li><li data-v-ccf92d3d><p data-v-ccf92d3d>DNS 解析</p><p data-v-ccf92d3d>c-ares</p></li><li data-v-ccf92d3d><p data-v-ccf92d3d>加密解密</p><p data-v-ccf92d3d>OpenSSL</p></li><li data-v-ccf92d3d><p data-v-ccf92d3d>其他...</p><p data-v-ccf92d3d>http_parser、zlib</p></li></ul>',3),u=[h];function b(n,l){return e(),s("div",r,u)}const f=t(c,[["render",b],["__scopeId","data-v-ccf92d3d"]]),_=a('<h1 id="node-js-技术架构" tabindex="-1">Node.js 技术架构 <a class="header-anchor" href="#node-js-技术架构" aria-label="Permalink to &quot;Node.js 技术架构&quot;">​</a></h1><h2 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h2><ul><li>官方地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noreferrer">中文文档</a>/<a href="https://nodejs.org/api/" target="_blank" rel="noreferrer">英文文档</a></li><li><a href="https://devdocs.io/" target="_blank" rel="noreferrer">devdocs.io</a> 搜索功能便捷，支持夜间模式，并且可以离线观看</li></ul><h2 id="node-js-是什么" tabindex="-1">Node.js 是什么 <a class="header-anchor" href="#node-js-是什么" aria-label="Permalink to &quot;Node.js 是什么&quot;">​</a></h2><ul><li><p><strong>是一个平台</strong></p><ul><li>让多种技术组合起来</li><li>让 JavaScript 也能调用系统接口、开发后端应用</li></ul></li><li><p><strong>Node.js 用到了哪些技术</strong></p><ul><li>V8引擎</li><li>libuv</li><li>C/C++ 实现的 c-ares、http-parser、OpenSSL、zlib 等库</li></ul></li></ul><h2 id="node-js-不是什么" tabindex="-1">Node.js 不是什么 <a class="header-anchor" href="#node-js-不是什么" aria-label="Permalink to &quot;Node.js 不是什么&quot;">​</a></h2><ul><li><p><strong>不是 web 框架</strong></p><ul><li>Node.js 并不是 web 后端框架</li><li>所以你不能把 Node.js 与 Flask 或 Spring 对比</li></ul></li><li><p><strong>不是编程语言</strong></p><ul><li>Node.js 并不是后端的 JS</li><li>所以你不能把 Node.js 与 Python 或 PHP 对比</li></ul></li></ul><h2 id="node-js-技术架构-1" tabindex="-1">Node.js 技术架构 <a class="header-anchor" href="#node-js-技术架构-1" aria-label="Permalink to &quot;Node.js 技术架构&quot;">​</a></h2>',8),g=a(`<p>随着 Node.js 的版本已经从 0.8 升级到 12.11.1，其架构也在一直变化中。如果你想看源码，推荐看 <a href="https://github.com/nodejs/node/tree/v0.10.0" target="_blank" rel="noreferrer">Node.js v0.10.0</a> 版本，因为这个版本使用了很久，而且源码相对最新版较少。</p><p>如果想要了解更多，可以看 <a href="https://github.com/yjhjstz/deep-into-node" target="_blank" rel="noreferrer">深入理解Node.js：核心思想与源码分析</a></p><h2 id="什么是-bindings" tabindex="-1">什么是 bindings <a class="header-anchor" href="#什么是-bindings" aria-label="Permalink to &quot;什么是 bindings&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><ul><li>C/C++ 实现了一个 http_parser 库， 很高效</li><li>你只会写 JS，但想使用这个库</li><li>直接调用肯定不会成功，于是就需要一个中间的桥梁</li></ul><h3 id="bindings" tabindex="-1">bindings <a class="header-anchor" href="#bindings" aria-label="Permalink to &quot;bindings&quot;">​</a></h3><ul><li>Node.js 用 C++ 对 <code>http_parser</code> 进行封装，使它符合某些要求，封装的文件名就叫做 <code>http_parser_bindings.cpp</code></li><li>用 Node.js 提供的编译工具将其编译为 <code>.node</code> 文件，JS 代码就可以直接 require 这个 <code>.node</code> 文件</li><li>这样 JS 就能调用 C++ 库，中间的桥梁就是 binding</li><li>由于 Node.js 提供了很多 binding，所以要加个 s，这就是 <strong><code>bindings</code></strong> 的由来</li></ul><h2 id="js-与-c-交互案例" tabindex="-1">JS 与 C++ 交互案例 <a class="header-anchor" href="#js-与-c-交互案例" aria-label="Permalink to &quot;JS 与 C++ 交互案例&quot;">​</a></h2><ul><li>JS 调用 C++ 代码：<a href="http://nodejs.cn/api/addons.html#addons_function_arguments" target="_blank" rel="noreferrer">官方示例</a></li><li>C++ 调用 JS 代码：<a href="http://nodejs.cn/api/addons.html#addons_callbacks" target="_blank" rel="noreferrer">官方示例</a></li></ul><h2 id="什么是-eventloop" tabindex="-1">什么是 EventLoop <a class="header-anchor" href="#什么是-eventloop" aria-label="Permalink to &quot;什么是 EventLoop&quot;">​</a></h2><p><strong>Event 表示事件</strong>，如：</p><ul><li>计时器到期，要执行一个事件</li><li>文件读取完毕或出错，要执行一个事件</li><li>socket 有内容了，关闭了，要执行一个事件</li></ul><p><strong>Loop 就是循环</strong>，如：</p><ul><li>while(true) 循环（死循环）</li><li>Node.js 需要按照顺序轮询每种事件，这种事件往往都是循环，所以叫 loop</li></ul><p><strong>EventLoop</strong></p><ul><li>操作系统触发事件，JS 处理事件，EventLoop 就是对事件处理顺序的管理</li><li>通常 EventLoop 会停留在 poll 阶段，不停的问操作系统，接下来有没有事情做</li></ul><p>EventLoop 执行顺序图示</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>   ┌───────────────────────────┐</span></span>
<span class="line"><span>┌─&gt;│           timers          │</span></span>
<span class="line"><span>│  └─────────────┬─────────────┘</span></span>
<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span>│  │     pending callbacks     │</span></span>
<span class="line"><span>│  └─────────────┬─────────────┘</span></span>
<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span>│  │       idle, prepare       │</span></span>
<span class="line"><span>│  └─────────────┬─────────────┘      ┌───────────────┐</span></span>
<span class="line"><span>│  ┌─────────────┴─────────────┐      │   incoming:   │</span></span>
<span class="line"><span>│  │           poll            │&lt;─────┤  connections, │</span></span>
<span class="line"><span>│  └─────────────┬─────────────┘      │   data, etc.  │</span></span>
<span class="line"><span>│  ┌─────────────┴─────────────┐      └───────────────┘</span></span>
<span class="line"><span>│  │           check           │</span></span>
<span class="line"><span>│  └─────────────┬─────────────┘</span></span>
<span class="line"><span>│  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span>└──┤      close callbacks      │</span></span>
<span class="line"><span>   └───────────────────────────┘</span></span></code></pre></div><details class="details custom-block"><summary>图示</summary><p><img src="`+o+'" alt="EventLoop 执行顺序图示"></p></details><h2 id="node-js-工作流程" tabindex="-1">Node.js 工作流程 <a class="header-anchor" href="#node-js-工作流程" aria-label="Permalink to &quot;Node.js 工作流程&quot;">​</a></h2><p><img src="'+p+`" alt="Node.js 工作流程"></p><h2 id="settimeout-setimmediate-的执行顺序" tabindex="-1">setTimeout &amp; setImmediate 的执行顺序 <a class="header-anchor" href="#settimeout-setimmediate-的执行顺序" aria-label="Permalink to &quot;setTimeout &amp; setImmediate 的执行顺序&quot;">​</a></h2><p>下面的代码中，那个函数先执行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f2)</span></span></code></pre></div><p>一般情况下都是 <code>setImmediate(f2)</code> 先执行，因为它处在 check 阶段，只有在 Node.js 第一次运行时，会先进入 timers 阶段</p><p>end 。。。</p>`,26),N=JSON.parse('{"title":"Node.js 技术架构","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/nodejs/nodejs-technical-architecture.md","filePath":"full-stack/nodejs/nodejs-technical-architecture.md","lastUpdated":1690688515000}'),m={name:"full-stack/nodejs/nodejs-technical-architecture.md"},C=i({...m,setup(n){return(l,v)=>(e(),s("div",null,[_,d(f),g]))}});export{N as __pageData,C as default};
