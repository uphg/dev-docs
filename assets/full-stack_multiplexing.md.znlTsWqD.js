import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as i,v as a,z as l}from"./chunks/vue.6z6dcVl3.js";const y=JSON.parse('{"title":"多路复用","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/multiplexing.md","filePath":"full-stack/multiplexing.md","lastUpdated":1690964303000}'),n={name:"full-stack/multiplexing.md"},t=l(`<h1 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-label="Permalink to &quot;多路复用&quot;">​</a></h1><h2 id="http-2-的帧是什么" tabindex="-1">HTTP/2 的帧是什么 <a class="header-anchor" href="#http-2-的帧是什么" aria-label="Permalink to &quot;HTTP/2 的帧是什么&quot;">​</a></h2><ul><li>HTTP 1.1 基于字符串</li><li>HTTP 2 基于帧 Frame（二进制）</li></ul><p>示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HEADERS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> END_STREAM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> END_HEADERS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GET</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :scheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resoure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example.org</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  accept </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jpeg</span></span></code></pre></div><ol><li>引入了帧（Frame）的概念，每一帧包含 Length + Type + Flags + StreamID + Payload 五部分，前四个部分是固定的长度，为 9 字节，第五部分 Payload 的最大长度为 2<sup>14</sup> 到 2<sup>24</sup> -1 字节，即 16Kb 到 16Mb，具体的最大长度由终端自行决定。</li><li>保留了请求和响应的概念，请求头和响应头会被发送方压缩后，分成几个连续的 Frame 传输，头字段会出现这些 Frame 的 Payload 中；接收方拼合这些 Frame 后，解压缩即可得到真正的请求头或响应头。</li><li>引入了流（Stream）的概念，一个 Stream 由双向传输的连续且有序的 Frame 组成，一个 TCP 连接可以同时包含多个 Stream（比如 100 个），一个 Stream 只用于一次请求和一次响应。Stream 之间不会互相影响。</li><li>服务端可以先发响应，客户端拿到响应结果后可以保存，之后就不需要再发对应的请求了。</li><li>头部字段全部改为小写，不允许出现大写。比如：<code>accept: text/html</code>。</li><li>引入了伪头部字段的概念，出现在头部字段的前面，必须以冒号开头。比如：<code>:method: GET</code>。</li></ol><p>笔记</p><ul><li>HTTP2 可以在一个 TCP 中开辟多条通道（Stream）</li><li>每个通道发送请求时都会有一个 StreamId，用来对应返回的响应</li><li>可以在一个TCP 连接中开启很多个通道（100 ... 1000 个）</li><li>每个通道中只能有一个请求和响应</li></ul><h2 id="服务器推送-serverpush-很少用到" tabindex="-1">服务器推送 ServerPush（很少用到） <a class="header-anchor" href="#服务器推送-serverpush-很少用到" aria-label="Permalink to &quot;服务器推送 ServerPush（很少用到）&quot;">​</a></h2><ul><li>当你发送了第一个请求后，服务端推送第一个响应，并推送你可能会用到的响应内容，如：1.css，2.css</li><li>当你第二次请求 1.css 时，浏览器会直接返回服务器推送的 1.css</li></ul><p>实现方式，在 Nginx 中添加以下配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">share</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  index index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  http2_push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">style.css;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  http2_push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">examp.png;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  http2_push_preload on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">然后，在 index.html 的响应头中添加：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">styles.css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preload; as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">style</span></span></code></pre></div>`,14),h=[t];function p(e,k,E,r,d,g){return a(),i("div",null,h)}const u=s(n,[["render",p]]);export{y as __pageData,u as default};
