import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as a,v as e,z as t}from"./chunks/vue.6z6dcVl3.js";const i="/dev-docs/assets/immer-update-data.d1O8ZlWb.png",m=JSON.parse('{"title":"React 状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"react/status-management.md","filePath":"react/status-management.md","lastUpdated":1694665317000}'),n={name:"react/status-management.md"},l=t(`<h1 id="react-状态管理" tabindex="-1">React 状态管理 <a class="header-anchor" href="#react-状态管理" aria-label="Permalink to &quot;React 状态管理&quot;">​</a></h1><p>什么是数据更新？</p><p>在 React 中，数据更新就是 state 改变。</p><h2 id="如何判断-state-是否改变" tabindex="-1">如何判断 state 是否改变 <a class="header-anchor" href="#如何判断-state-是否改变" aria-label="Permalink to &quot;如何判断 state 是否改变&quot;">​</a></h2><p><strong>class 组件：</strong></p><ul><li>当调用 <code>this.setState(this.state)</code>时，不管 state 是否改变，都会调用 render。</li><li>但 class 组件容易造成多余的 render，即便你什么都不做，直接调用 <code>this.setState</code> 还是会 render</li><li>class 可以在 should 中对比新旧 state，控制是否重新 render，<a href="https://codesandbox.io/s/class-zujian-should-smmny?file=/src/index.js" target="_blank" rel="noreferrer">demo</a></li><li>React 还提供了 pureComponents，自动帮你做对比，<a href="https://codesandbox.io/s/class-pure-zujian-2o5m0?file=/src/index.js" target="_blank" rel="noreferrer">demo</a></li><li>但上面的优化有个缺点，如果你修改原始的 state 并传入 <code>this.setState</code>，它们就会失效，<a href="https://codesandbox.io/s/class-zujianxiugai-stategai-render-mei-render-mqg1m" target="_blank" rel="noreferrer">demo</a>，也就是会导致无法 render。</li><li>所以，永远不要直接修改 state。</li></ul><p><strong>函数组件：</strong></p><ul><li>当使用 <code>setState(state)</code> 时，只有 state 的引用改变，才会重新 render。</li><li>可以强迫你每次 <code>setState</code> 都使用新的 state。</li></ul><h2 id="如何更新-state" tabindex="-1">如何更新 state <a class="header-anchor" href="#如何更新-state" aria-label="Permalink to &quot;如何更新 state&quot;">​</a></h2><p>在函数组件中，我们通常会使用 <code>newState = { ...state, count: 2 }</code> 的方式修改 state。</p><p>但，如果 state 的嵌套层级变多了怎么办，比如我要修改 <code>state.user.group.name</code>，就要这么写：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.user,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.user.group,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;group 2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样会让更新 state 变得特别复杂，有什么办法可以让创建 state 简化？</p><p>可以使用 immer.js，代码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  draft.user.group.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;group 2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>只写了一行代码，就可以创建新的 state。它是怎么做到的？</p><p>在上面代码中的 draft，其实是一个 Proxy，会把你的修改收集起来，然后创建一个新对象。</p><p>而且 immer 创建新对象的方式很智能，并不是直接深拷贝（深拷贝很浪费内存），它的更新方式如下：</p><p><img src="`+i+'" alt="Alt text"></p><p>总结</p><ul><li>immer.js 永远不会修改原数据</li><li>两个图中的 other 是同一个对象，只有在你修改 other 时才创建新的对象。</li></ul><h2 id="实现撤销-恢复功能" tabindex="-1">实现撤销/恢复功能 <a class="header-anchor" href="#实现撤销-恢复功能" aria-label="Permalink to &quot;实现撤销/恢复功能&quot;">​</a></h2><p>假如要在本地实现一个撤销/恢复的功能，可以用以下思路：</p><ul><li>创建 history、redo 两个数组</li><li>每次变更都会运行 <code>history.push()</code> 更新历史。</li><li>每次撤回在 <code>history.pop()</code> 的同时，使用 <code>redo.push()</code> 记录当前的撤回，以便恢复。</li><li>如果撤销后想要恢复，就使用 <code>redo.pop()</code> 拿到要恢复的值。</li><li>这就是 React 的 time travel（时间旅行）。</li></ul>',24),p=[l];function r(h,d,o,c,k,E){return e(),a("div",null,p)}const y=s(n,[["render",r]]);export{m as __pageData,y as default};
