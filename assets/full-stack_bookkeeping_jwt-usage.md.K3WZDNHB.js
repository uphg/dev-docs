import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as i,v as a,z as n}from"./chunks/vue.6z6dcVl3.js";const y=JSON.parse('{"title":"JWT 的定义与用法","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/bookkeeping/jwt-usage.md","filePath":"full-stack/bookkeeping/jwt-usage.md","lastUpdated":1693303872000}'),h={name:"full-stack/bookkeeping/jwt-usage.md"},l=n(`<h1 id="jwt-的定义与用法" tabindex="-1">JWT 的定义与用法 <a class="header-anchor" href="#jwt-的定义与用法" aria-label="Permalink to &quot;JWT 的定义与用法&quot;">​</a></h1><p>登录功能参考：<a href="./web-login.html">你会做WEB上的用户登录功能吗？</a></p><p>JWT 全称 JSON Web Token，大意为支持 JSON 的 Token</p><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><p>服务器向客户端浏览器发送一段 token，客户端在后续的请求中都会自动携带该 token，如 <code>Cookie: token</code>。</p><h2 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h2><p>一般会基于 Cookie 实现，服务器给浏览器发送一个字符串，用于识别是哪个客户端发送给服务器的，该字符串对应原始值存储在服务器中。</p><h2 id="jwt-的定义" tabindex="-1">JWT 的定义 <a class="header-anchor" href="#jwt-的定义" aria-label="Permalink to &quot;JWT 的定义&quot;">​</a></h2><p>为了解决 Session 在服务器存储浏览器的信息映射的问题，JWT 会直接向浏览器发送一个内容加密后的字符串，浏览器存储并在之后的请求中附带</p><h3 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h3><p>它的结构如下：</p><p><strong>Header</strong></p><p><code>alg</code> 标识用于生成签名的算法。<code>typ</code> JWT 的类型，比如登录、权限控制等。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Payload</strong></p><p>要存储的数据，JSON 格式即可（其中部分为内置字段）</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;loggedInAs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1422779638</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Signature</strong> （签名）</p><p>它的加密方式为（base64是为了支持中文）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>signature = 加密(私钥, base64(header), base64(Payload))</span></span></code></pre></div><p>最终 JWT 的格式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64urlEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(header) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64urlEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64urlEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signature)</span></span></code></pre></div><p>此处 header 和 payload 并未加密，但前端即使拿到也不能修改，修改后就无法与后端对应了。也就是它是只读的，前端也可以读取该数据</p><h2 id="jwt-实现流程" tabindex="-1">JWT 实现流程 <a class="header-anchor" href="#jwt-实现流程" aria-label="Permalink to &quot;JWT 实现流程&quot;">​</a></h2><ul><li>浏览器向服务器发送一个附带用户信息的请求，服务器返回一个存储信息后的 JWT。</li><li>用户将 JWT 存储在本地 localStorage 中，之后的每次请求都在 header 头中附带该 JWT。</li><li>也可将 JWT 直接存储在 Cookie 中，它可以自动在每次请求携带。</li></ul><p>这样看起来 Session 似乎更好，但 JWT 其实通用性更好，它除了支持 TCP 还可以支持 RDP、UDP 等。</p><h2 id="测试用户登录" tabindex="-1">测试用户登录 <a class="header-anchor" href="#测试用户登录" aria-label="Permalink to &quot;测试用户登录&quot;">​</a></h2><ul><li>首先查看曾经是否向当前 email 发送过对应 code（在数据库中找不到对应字段）</li><li>其次当前 code 没有被使用过（也就是 它的 used_at 字段为空）</li></ul><p>创建两个 controller</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/rails g controller api/v1/sessions_controller</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/rails g controller api/v1/mes_controller</span></span></code></pre></div><p>if 代码简化</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canSignin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :unauthorized</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简化 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :unauthorized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canSignin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简化 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :unauthorized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canSignin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简化 3 unless 意为：如果不</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :unauthorized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canSignin</span></span></code></pre></div><p>rescue 代码补救，表示代码报错就返回指定内容</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payload[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rescue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span></code></pre></div><h2 id="在-rails-中使用-jwt" tabindex="-1">在 Rails 中使用 JWT <a class="header-anchor" href="#在-rails-中使用-jwt" aria-label="Permalink to &quot;在 Rails 中使用 JWT&quot;">​</a></h2><p>参考：<a href="https://github.com/jwt/ruby-jwt" target="_blank" rel="noreferrer">JWT</a></p><h3 id="using-bundler" tabindex="-1">Using Bundler: <a class="header-anchor" href="#using-bundler" aria-label="Permalink to &quot;Using Bundler:&quot;">​</a></h3><p>在你的 Gemfile 中添加</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gem &#39;jwt&#39;</span></span></code></pre></div><p>然后运行 <code>bundle install</code></p><p>使用 HMAC</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jwt&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hmac_secret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;my$ecretK3y&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JWT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.encode payload, hmac_secret, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HS256&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoded_token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JWT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.decode token, hmac_secret, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">algorithm:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;HS256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>其中 hmac_secret 可以存储在密钥管理中，从 <code>Rails.application.credentials.hmac_secret</code> 获取</p><h2 id="将-jwt-封装为中间件" tabindex="-1">将 JWT 封装为中间件 <a class="header-anchor" href="#将-jwt-封装为中间件" aria-label="Permalink to &quot;将 JWT 封装为中间件&quot;">​</a></h2><p>Rails 中间件文档：<a href="https://guides.rubyonrails.org/rails_on_rack.html#action-dispatcher-middleware-stack" target="_blank" rel="noreferrer">Action Dispatcher Middleware Stack</a></p><p>创建 lib/auto_jwt.rb</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoJwt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP_AUTHORIZATION&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jwt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rescue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    payload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JWT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.decode jwt, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.credentials.hmac_secret, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">algorithm:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;HS256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rescue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    env[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;current_user_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payload[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rescue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @status, @headers, @response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @app.call(env)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [@status, @headers, @response]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>在 config/application.rb 添加如下配置</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require_relative</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../lib/auto_jwt&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mangosteen1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rails::Application</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.middleware.use </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AutoJwt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>rspec 运行指定用例两种方式</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rspec -e &quot;登录后成功获取&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用路径，运行指定文件的第5行测试用例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rspec spec/request/items_spec.rb:5</span></span></code></pre></div><p>在测试时间时，尽量使用字符串，或者标准时间（解决时区问题）</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.create </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">amount:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">created_at:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2018</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+00:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.create </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">amount:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">created_at:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2018</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.create </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">amount:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">created_at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2018-01-01&#39;</span></span></code></pre></div><p>rspec 语法简写</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response_field </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response_field </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;金额&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :resources</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以简写为以下方式，省略了 scope: :resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">with_options </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:resources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response_field </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ID&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response_field </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;金额（单位：分）&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="refreshtoken-是什么" tabindex="-1">RefreshToken 是什么 <a class="header-anchor" href="#refreshtoken-是什么" aria-label="Permalink to &quot;RefreshToken 是什么&quot;">​</a></h2><p>RefreshToken 指的是在指定时间内如果权限过期（JWT），用于自动刷新 JWT 的 Token</p><p>RefreshToken 实现流程</p><ul><li>首先 RefreshToken 最好设置 2h-24h 过期，我们默认为 2h 过期</li><li>用户登录，获取 JWT，并附带一个随机数字符串（Token）该字符串存储在数据库中</li><li>2h 后用户再次请求接口时，发现已过期，就可以请求 /refresh 接口，获取一个新的 JWT</li></ul><p>RefreshToken 解决多设备</p><ul><li>假如用户登录了3个设备，我们可以为每个设备存储一个随机数（Token）</li><li>并且可以限制登录设备，如果要限制 3 个设备，可以在第四个设备登录时删除第1个设备，或者禁止第四个设备缓存 token</li></ul><p>RefreshToken 和 JWT 哪个更重要</p><ul><li>首先 RefreshToken 只有在2个小时后才会再次请求，但 JWT 需要每次请求都附带，所以 JWT 暴露风险更高，故需要更强的加密</li></ul><p>RefreshToken 也可以用 JWT 实现，但没有 Token 灵活</p>`,64),t=[l];function p(e,k,r,d,E,g){return a(),i("div",null,t)}const F=s(h,[["render",p]]);export{y as __pageData,F as default};
