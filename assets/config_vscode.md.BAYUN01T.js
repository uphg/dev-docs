import{_ as s}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as i,v as a,z as t}from"./chunks/vue.6z6dcVl3.js";const e="/dev-docs/assets/vscode-sticky-scroll.Rmq4I_L9.png",g=JSON.parse('{"title":"VSCode 配置","description":"","frontmatter":{},"headers":[],"relativePath":"config/vscode.md","filePath":"config/vscode.md","lastUpdated":1714745768000}'),n={name:"config/vscode.md"},p=t('<h1 id="vscode-配置" tabindex="-1">VSCode 配置 <a class="header-anchor" href="#vscode-配置" aria-label="Permalink to &quot;VSCode 配置&quot;">​</a></h1><p>配置目录层级是否粘连滚动</p><p><img src="'+e+`" alt="VSCode sticky scroll"></p><h2 id="默认文件换行格式" tabindex="-1">默认文件换行格式 <a class="header-anchor" href="#默认文件换行格式" aria-label="Permalink to &quot;默认文件换行格式&quot;">​</a></h2><p>在 settings.json 中添加</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;files.eol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>它的可选值：</p><ul><li><code>\\n</code>：表示 LF（Unix、Linux 和 macOS 格式）。</li><li><code>\\r\\n</code>：表示 CRLF（Windows 格式）。</li><li><code>auto</code>：自动选择操作系统特定的行尾字符。</li></ul><h2 id="指定-typescript-的-typescript-server-的路径" tabindex="-1">指定 TypeScript 的 TypeScript Server 的路径 <a class="header-anchor" href="#指定-typescript-的-typescript-server-的路径" aria-label="Permalink to &quot;指定 TypeScript 的 TypeScript Server 的路径&quot;">​</a></h2><p>TypeScript Server 是一个 TypeScript 编译器的后台进程，它负责处理 TypeScript 文件的语法分析、类型检查、自动补全等功能。当你在 VS Code 中编辑 TypeScript 文件时，这个服务器会为你提供实时的代码分析和提示。</p><p>使用 <code>typescript.tsdk</code> 配置项允许你指定 TypeScript Server 的位置，配置示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typescript.tsdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="代码保存时使用-eslint-stylelint-等" tabindex="-1">代码保存时使用 ESLint/Stylelint 等 <a class="header-anchor" href="#代码保存时使用-eslint-stylelint-等" aria-label="Permalink to &quot;代码保存时使用 ESLint/Stylelint 等&quot;">​</a></h2><p>以下配置表示在保存文件时，ESLint/Stylelint 将只自动修复代码中的错误，而不会处理警告。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;source.fixAll.eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;explicit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;source.fixAll.stylelint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;explicit&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果希望在保存时同时修复代码中的错误和警告，可以将配置项设置为 <code>&quot;true&quot;</code>。</p>`,16),l=[p];function o(h,c,r,d,k,E){return a(),i("div",null,l)}const v=s(n,[["render",o]]);export{g as __pageData,v as default};
