import{_ as e}from"./chunks/plugin-vue_export-helper.x3n3nnut.js";import{x as a,v as l,z as t}from"./chunks/vue.6z6dcVl3.js";const m=JSON.parse('{"title":"AST、babel、依赖","description":"","frontmatter":{},"headers":[],"relativePath":"full-stack/nodejs/webpack-ast-babel-and-rely.md","filePath":"full-stack/nodejs/webpack-ast-babel-and-rely.md","lastUpdated":1690551438000}'),o={name:"full-stack/nodejs/webpack-ast-babel-and-rely.md"},r=t('<h1 id="ast、babel、依赖" tabindex="-1">AST、babel、依赖 <a class="header-anchor" href="#ast、babel、依赖" aria-label="Permalink to &quot;AST、babel、依赖&quot;">​</a></h1><p>代码地址：<a href="https://github.com/uphg/webpack-babel-compile-demo" target="_blank" rel="noreferrer">github.com/uphg/webpack-babel-compile-demo</a></p><h2 id="babel-的原理" tabindex="-1">babel 的原理 <a class="header-anchor" href="#babel-的原理" aria-label="Permalink to &quot;babel 的原理&quot;">​</a></h2><ol><li>parse: 把代码 code1 变成 AST</li><li>traverse: 遍历 AST 进行修改</li><li>generate: 把 AST 变成代码 code2</li></ol><p><strong>运行流程</strong></p><p>code --(1)-&gt; ast --(2)-&gt; ast2 --(3)-&gt; code2</p><h2 id="将任意代码转为合法的-es5-代码" tabindex="-1">将任意代码转为合法的 ES5 代码 <a class="header-anchor" href="#将任意代码转为合法的-es5-代码" aria-label="Permalink to &quot;将任意代码转为合法的 ES5 代码&quot;">​</a></h2><p>使用 <code>@babel/core</code> 的 transformFromAstSync 方法即可，参考示例 <code>to-es5.ts</code></p><h2 id="分析-js-的依赖关系" tabindex="-1">分析 JS 的依赖关系 <a class="header-anchor" href="#分析-js-的依赖关系" aria-label="Permalink to &quot;分析 JS 的依赖关系&quot;">​</a></h2><p>创建一个 collectCodeAndDeps 方法，用于分析 js 文件之间的依赖关系，参考 <code>deps_*.js</code>（静态分析）</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>AST</p><ol><li>parse：把代码 code 变成 ast</li><li>traverse：遍历 AST 进行修改</li><li>generate：把 AST 变成代码 code2</li></ol><p>工具</p><ul><li>babel 可以把新语法代码转为 ES5</li><li>@babel/parser</li><li>@babel/traverse</li><li>@babel/generate</li><li>@babel/core 包含前三者</li><li>@babel/preset-env 内置转换规则</li></ul><p>代码技巧</p><ul><li>使用哈希表来存储数据</li><li>通过检测 key 来避免重复（循环依赖）</li></ul><p>循环依赖</p><ul><li>有的循环依赖可以正常执行（参考 project_5）</li><li>有的循环依赖不可以（参考 project_4）</li><li>但都可以做静态分析</li></ul>',19),i=[r];function s(b,c,d,n,p,h){return l(),a("div",null,i)}const f=e(o,[["render",s]]);export{m as __pageData,f as default};
